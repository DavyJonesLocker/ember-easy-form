minispade.register('ember-easyForm/config', "(function() {Ember.EasyForm.Config = Ember.Namespace.create({\n  _wrappers: {\n    'default': {\n      formClass: '',\n      fieldErrorClass: 'fieldWithErrors',\n      inputClass: 'input',\n      errorClass: 'error',\n      hintClass: 'hint',\n      labelClass: '',\n      wrapControls: false,\n      controlsWrapperClass: ''\n    }\n  },\n  _inputTypes: {},\n  registerWrapper: function(name, wrapper) {\n    this._wrappers[name] = Ember.$.extend({}, this._wrappers['default'], wrapper);\n  },\n  getWrapper: function(name) {\n    var wrapper = this._wrappers[name];\n    Ember.assert(\"The wrapper '\" + name + \"' was not registered.\", wrapper);\n    return wrapper;\n  },\n  registerInputType: function(name, type){\n    this._inputTypes[name] = type;\n  },\n  getInputType: function(name) {\n    return this._inputTypes[name];\n  }\n});\n})();\n//@ sourceURL=ember-easyForm/config");minispade.register('ember-easyForm/core', "(function() {Ember.EasyForm = Ember.Namespace.create({\n  VERSION: '1.0.0.beta.1'\n});\n\n})();\n//@ sourceURL=ember-easyForm/core");minispade.register('ember-easyForm/helpers', "(function() {minispade.require('ember-easyForm/helpers/error-field');\nminispade.require('ember-easyForm/helpers/form-for');\nminispade.require('ember-easyForm/helpers/hint-field');\nminispade.require('ember-easyForm/helpers/input');\nminispade.require('ember-easyForm/helpers/input-field');\nminispade.require('ember-easyForm/helpers/label-field');\nminispade.require('ember-easyForm/helpers/submit');\n\n})();\n//@ sourceURL=ember-easyForm/helpers");minispade.register('ember-easyForm/helpers/error-field', "(function() {Ember.Handlebars.registerHelper('error-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.propertyBinding) {\n    options.hash.property = Ember.Handlebars.get(this, options.hash.propertyBinding, options);\n  }\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Error, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/error-field");minispade.register('ember-easyForm/helpers/form-for', "(function() {Ember.Handlebars.registerHelper('form-for', function(object, options) {\n  options.hash.contentBinding = object;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Form, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/form-for");minispade.register('ember-easyForm/helpers/hint-field', "(function() {Ember.Handlebars.registerHelper('hint-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.text || options.hash.textBinding) {\n    return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Hint, options);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/hint-field");minispade.register('ember-easyForm/helpers/input-field', "(function() {Ember.Handlebars.registerHelper('input-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n\n  if (options.hash.propertyBinding) {\n    options.hash.property = Ember.Handlebars.get(this, options.hash.propertyBinding, options);\n  }\n\n  if (options.hash.inputOptionsBinding) {\n    options.hash.inputOptions = Ember.Handlebars.get(this, options.hash.inputOptionsBinding, options);\n  }\n\n  property = options.hash.property;\n\n  var context = this,\n    propertyType = function(property) {\n      var constructor = (context.get('content') || context).constructor;\n\n      if (constructor.proto) {\n        return Ember.meta(constructor.proto(), false).descs[property];\n      } else {\n        return null;\n      }\n    };\n\n  options.hash.valueBinding = property;\n  options.hash.viewName = 'input-field-'+options.data.view.elementId;\n\n  if (options.hash.inputOptions) {\n    var inputOptions = options.hash.inputOptions, optionName;\n    for (optionName in inputOptions) {\n      if (inputOptions.hasOwnProperty(optionName)) {\n       options.hash[optionName] = inputOptions[optionName];\n      }\n    }\n    delete options.hash.inputOptions;\n  }\n\n  if (options.hash.inputConfig) {\n    var configs = options.hash.inputConfig.split(';');\n    var i = configs.length;\n    while(i--) {\n      var config = configs[i].split(':');\n      options.hash[config[0]] = config[1];\n    }\n  }\n\n  if (options.hash.as === 'text') {\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextArea, options);\n  } else if (options.hash.as === 'select') {\n    delete(options.hash.valueBinding);\n\n    options.hash.contentBinding   = options.hash.collection;\n    options.hash.selectionBinding = options.hash.selection;\n    options.hash.valueBinding     = options.hash.value;\n\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Select, options);\n  } else {\n    if (!options.hash.as) {\n      if (property.match(/password/)) {\n        options.hash.type = 'password';\n      } else if (property.match(/email/)) {\n        options.hash.type = 'email';\n      } else if (property.match(/url/)) {\n        options.hash.type = 'url';\n      } else if (property.match(/color/)) {\n        options.hash.type = 'color';\n      } else if (property.match(/^tel/)) {\n        options.hash.type = 'tel';\n      } else if (property.match(/search/)) {\n        options.hash.type = 'search';\n      } else {\n        if (propertyType(property) === 'number' || typeof(context.get(property)) === 'number') {\n          options.hash.type = 'number';\n        } else if (propertyType(property) === 'date' || (!Ember.isNone(context.get(property)) && context.get(property).constructor === Date)) {\n          options.hash.type = 'date';\n        } else if (propertyType(property) === 'boolean' || (!Ember.isNone(context.get(property)) && context.get(property).constructor === Boolean)) {\n          options.hash.checkedBinding = property;\n          return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.Checkbox, options);\n        }\n      }\n    } else {\n      var inputType = Ember.EasyForm.Config.getInputType(options.hash.as);\n      if (inputType) {\n        return Ember.Handlebars.helpers.view.call(context, inputType, options);\n      }\n\n      options.hash.type = options.hash.as;\n    }\n    return Ember.Handlebars.helpers.view.call(context, Ember.EasyForm.TextField, options);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/input-field");minispade.register('ember-easyForm/helpers/input', "(function() {Ember.Handlebars.registerHelper('input', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.isBlock = !!(options.fn);\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Input, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/input");minispade.register('ember-easyForm/helpers/label-field', "(function() {Ember.Handlebars.registerHelper('label-field', function(property, options) {\n  options = Ember.EasyForm.processOptions(property, options);\n  options.hash.viewName = 'label-field-'+options.data.view.elementId;\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Label, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/label-field");minispade.register('ember-easyForm/helpers/submit', "(function() {Ember.Handlebars.registerHelper('submit', function(value, options) {\n  if (typeof(value) === 'object') {\n    options = value;\n    value = undefined;\n  }\n  options.hash.context = this;\n  options.hash.value = value || 'Submit';\n  return Ember.Handlebars.helpers.view.call(this, Ember.EasyForm.Submit, options);\n});\n\n})();\n//@ sourceURL=ember-easyForm/helpers/submit");minispade.register('ember-easyForm', "(function() {minispade.require('ember-easyForm/core');\nminispade.require('ember-easyForm/config');\nminispade.require('ember-easyForm/helpers');\nminispade.require('ember-easyForm/views');\nminispade.require('ember-easyForm/templates');\nminispade.require('ember-easyForm/utilities');\n\n})();\n//@ sourceURL=ember-easyForm");minispade.register('ember-easyForm/templates', "(function() {minispade.require('ember-easyForm/templates/error');\nminispade.require('ember-easyForm/templates/input');\nminispade.require('ember-easyForm/templates/inputControls');\nminispade.require('ember-easyForm/templates/wrappedInput');\n\n})();\n//@ sourceURL=ember-easyForm/templates");minispade.register('ember-easyForm/templates/error', "(function() {Ember.TEMPLATES['easyForm/error'] = Ember.Handlebars.compile('{{view.errors.firstObject}}');\n\n})();\n//@ sourceURL=ember-easyForm/templates/error");minispade.register('ember-easyForm/templates/input', "(function() {Ember.TEMPLATES['easyForm/input'] = Ember.Handlebars.compile('{{label-field propertyBinding=view.property textBinding=view.label}}{{partial \"easyForm/inputControls\"}}');\n\n})();\n//@ sourceURL=ember-easyForm/templates/input");minispade.register('ember-easyForm/templates/inputControls', "(function() {Ember.TEMPLATES['easyForm/inputControls'] = Ember.Handlebars.compile('{{input-field propertyBinding=view.property inputOptionsBinding=view.inputOptionsValues}}{{#if view.showError}}{{error-field propertyBinding=view.property}}{{/if}}{{hint-field propertyBinding=view.property textBinding=view.hint}}');\n\n})();\n//@ sourceURL=ember-easyForm/templates/inputControls");minispade.register('ember-easyForm/templates/wrappedInput', "(function() {Ember.TEMPLATES['easyForm/wrapped_input'] = Ember.Handlebars.compile('{{label-field propertyBinding=view.property textBinding=view.label}}<div class=\"{{unbound view.controlsWrapperClass}}\">{{partial \"easyForm/inputControls\"}}</div>');\n\n})();\n//@ sourceURL=ember-easyForm/templates/wrappedInput");minispade.register('ember-easyForm/utilities', "(function() {Ember.EasyForm.objectNameFor = function(object) {\n  var constructorArray = object.constructor.toString().split('.');\n  return constructorArray[constructorArray.length - 1].underscore();\n};\n\nEmber.EasyForm.processOptions = function(property, options) {\n  if (options) {\n    options.hash.property = property;\n  } else {\n    options = property;\n  }\n\n  return options;\n};\n\n})();\n//@ sourceURL=ember-easyForm/utilities");minispade.register('ember-easyForm/views', "(function() {minispade.require('ember-easyForm/views/base_view');\nminispade.require('ember-easyForm/views/checkbox');\nminispade.require('ember-easyForm/views/error');\nminispade.require('ember-easyForm/views/form');\nminispade.require('ember-easyForm/views/hint');\nminispade.require('ember-easyForm/views/input');\nminispade.require('ember-easyForm/views/label');\nminispade.require('ember-easyForm/views/select');\nminispade.require('ember-easyForm/views/submit');\nminispade.require('ember-easyForm/views/textArea');\nminispade.require('ember-easyForm/views/textField');\n\n})();\n//@ sourceURL=ember-easyForm/views");minispade.register('ember-easyForm/views/base_view', "(function() {Ember.EasyForm.BaseView = Ember.View.extend({\n  getWrapperConfig: function(configName) {\n    var wrapper = Ember.EasyForm.Config.getWrapper(this.get('wrapper'));\n    return wrapper[configName];\n  },\n  wrapper: Ember.computed(function() {\n    // Find the first parent with 'wrapper' defined.\n    var parentView = this.get('parentView');\n    while(parentView){\n      var config = parentView.get('wrapper');\n      if (config) return config;\n      parentView = parentView.get('parentView');\n    }\n\n    return 'default';\n  })\n});\n})();\n//@ sourceURL=ember-easyForm/views/base_view");minispade.register('ember-easyForm/views/checkbox', "(function() {Ember.EasyForm.Checkbox = Ember.Checkbox.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/checkbox");minispade.register('ember-easyForm/views/error', "(function() {Ember.EasyForm.Error = Ember.EasyForm.BaseView.extend({\n  tagName: 'span',\n  init: function() {\n    this._super();\n    this.classNames.push(this.getWrapperConfig('errorClass'));\n    Ember.Binding.from('context.errors.' + this.property).to('errors').connect(this);\n  },\n  templateName: 'easyForm/error'\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/error");minispade.register('ember-easyForm/views/form', "(function() {Ember.EasyForm.Form = Ember.EasyForm.BaseView.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  novalidate: 'novalidate',\n  wrapper: 'default',\n  init: function() {\n    this._super();\n    this.classNames.push(this.getWrapperConfig('formClass'));\n    this.action = this.action || 'submit';\n  },\n  submit: function(event) {\n    var _this = this, promise;\n\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (Ember.isNone(this.get('context.validate'))) {\n      this.get('controller').send(this.action);\n    } else {\n      if (!Ember.isNone(this.get('context').validate)) {\n        promise = this.get('context').validate();\n      } else {\n        promise = this.get('context.content').validate();\n      }\n      promise.then(function() {\n        if (_this.get('context.isValid')) {\n          _this.get('controller').send(_this.action);\n        }\n      });\n    }\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/form");minispade.register('ember-easyForm/views/hint', "(function() {Ember.EasyForm.Hint = Ember.EasyForm.BaseView.extend({\n  tagName: 'span',\n  init: function() {\n    this._super();\n    this.classNames.push(this.getWrapperConfig('hintClass'));\n  },\n  render: function(buffer) {\n    buffer.push(Handlebars.Utils.escapeExpression(this.get('text')));\n  },\n  textChanged: function() {\n    this.rerender();\n  }.observes('text')\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/hint");minispade.register('ember-easyForm/views/input', "(function() {Ember.EasyForm.Input = Ember.EasyForm.BaseView.extend({\n  init: function() {\n    this._super();\n    this.classNameBindings.push('showError:' + this.getWrapperConfig('fieldErrorClass'));\n    this.classNames.push(this.getWrapperConfig('inputClass'));\n    Ember.defineProperty(this, 'showError', Ember.computed.and('canShowValidationError', 'context.errors.' + this.property + '.firstObject'));\n    if (!this.isBlock) {\n      if (this.getWrapperConfig('wrapControls')) {\n        this.set('templateName', 'easyForm/wrapped_input');\n      } else {\n        this.set('templateName', 'easyForm/input');\n      }\n    }\n  },\n  setupValidationDependencies: function() {\n    var keys = this.get('context._dependentValidationKeys'), key;\n    if (keys) {\n      for(key in keys) {\n        if (keys[key].contains(this.property)) {\n          this._keysForValidationDependencies.pushObject(key);\n        }\n      }\n    }\n  }.on('init'),\n  _keysForValidationDependencies: Ember.A(),\n  dependentValidationKeyCanTrigger: false,\n  tagName: 'div',\n  classNames: ['string'],\n  didInsertElement: function() {\n    this.set('label-field-'+this.elementId+'.for', this.get('input-field-'+this.elementId+'.elementId'));\n  },\n  concatenatedProperties: ['inputOptions', 'bindableInputOptions'],\n  inputOptions: ['as', 'inputConfig', 'collection', 'optionValuePath', 'optionLabelPath', 'selection', 'value'],\n  bindableInputOptions: ['placeholder', 'prompt'],\n  controlsWrapperClass: function() {\n    return this.getWrapperConfig('controlsWrapperClass');\n  }.property(),\n  inputOptionsValues: function() {\n    var options = {}, i, value, key, keyBinding, inputOptions = this.inputOptions, bindableInputOptions = this.bindableInputOptions;\n    for (i = 0; i < inputOptions.length; i++) {\n      key = inputOptions[i];\n      value = this.get(key);\n      if (value) {\n        if (typeof(value) === 'boolean') {\n          value = key;\n        }\n        options[key] = value;\n      }\n    }\n    for (i = 0; i < bindableInputOptions.length; i++) {\n      key = bindableInputOptions[i];\n      keyBinding = key + 'Binding';\n      if (this.get(key) || this.get(keyBinding)) {\n        options[keyBinding] = 'view.' + key;\n      }\n    }\n    return options;\n  }.property(),\n  focusOut: function() {\n    this.set('hasFocusedOut', true);\n    this.showValidationError();\n  },\n  showValidationError: function() {\n    if (this.get('hasFocusedOut')) {\n      if (Ember.isEmpty(this.get('context.errors.' + this.property))) {\n        this.set('canShowValidationError', false);\n      } else {\n        this.set('canShowValidationError', true);\n      }\n    }\n  },\n  input: function() {\n    this._keysForValidationDependencies.forEach(function(key) {\n     this.get('parentView.childViews').forEach(function(view) {\n       if (view.property === key) {\n         view.showValidationError();\n       }\n     }, this);\n    }, this);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/input");minispade.register('ember-easyForm/views/label', "(function() {Ember.EasyForm.Label = Ember.EasyForm.BaseView.extend({\n  tagName: 'label',\n  attributeBindings: ['for'],\n  labelText: function() {\n    return this.get('text') || this.get('property').underscore().split('_').join(' ').capitalize();\n  }.property('text', 'property'),\n  init: function() {\n    this._super();\n    this.classNames.push(this.getWrapperConfig('labelClass'));\n  },\n  render: function(buffer) {\n    buffer.push(Handlebars.Utils.escapeExpression(this.get('labelText')));\n  },\n  labelTextChanged: function() {\n    this.rerender();\n  }.observes('labelText')\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/label");minispade.register('ember-easyForm/views/select', "(function() {Ember.EasyForm.Select = Ember.Select.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/select");minispade.register('ember-easyForm/views/submit', "(function() {Ember.EasyForm.Submit = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['type', 'value', 'disabled'],\n  type: 'submit',\n  disabled: function() {\n    return this.get('context.isInvalid');\n  }.property('context.isInvalid'),\n  init: function() {\n    this._super();\n    this.set('value', this.value);\n  }\n});\n\n})();\n//@ sourceURL=ember-easyForm/views/submit");minispade.register('ember-easyForm/views/textArea', "(function() {Ember.EasyForm.TextArea = Ember.TextArea.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/textArea");minispade.register('ember-easyForm/views/textField', "(function() {Ember.EasyForm.TextField = Ember.TextField.extend();\n\n})();\n//@ sourceURL=ember-easyForm/views/textField");